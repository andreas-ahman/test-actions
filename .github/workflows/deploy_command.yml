name: Deploy infrastructure changes
on:
  repository_dispatch:
    types: [deploy-command]
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      # Checkout the PR branch
      - uses: actions/checkout@v2
        with:
          token: ${{ secrets.PAT }}
          repository: ${{ github.event.client_payload.pull_request.head.repo.full_name }}
          ref: ${{ github.event.client_payload.pull_request.head.ref }}
      # Verify that feature only merges to develop and develop to production.
      - name: Verify branch order
        run: |
          if [[ "${{ github.event.client_payload.pull_request.base.ref }}" == "develop" ]] && [[ "$ENVIRONMENT" != "test" ]]; then
            echo "::error::Not possible to deploy to environments other than test for PR opened against develop."
            exit 1
          fi
      # If develop to production and cluster != dev verify that previous env was successful
      # unless override was passed in.
      # Also block deploy to test if base.ref == production
      - name: set previous cluster
        run: |
          export CLUSTER=${{ github.event.client_payload.slash_command.args.unnamed.arg1 }}
          export OVERRIDE=${{ github.event.client_payload.slash_command.args.named.override }}
          export ENVIRONMENT=$(echo ${{ github.event.client_payload.slash_command.args.unnamed.arg1 }} | cut -d '-' -f 4)
          export TF_CLUSTER=$(echo ${{ github.event.client_payload.slash_command.args.unnamed.arg1 }} | cut -d '-' -f 1-3)
          echo "CLUSTER=${CLUSTER}" >> $GITHUB_ENV
          if [[ "$OVERRIDE" == "true" ]]; then
            echo "Override set, will not check previous installations."
            echo "OVERRIDE=${OVERRIDE}" >> $GITHUB_ENV
          fi
          echo "ENVIRONMENT=${ENVIRONMENT}" >> $GITHUB_ENV

          find ./terraform/$TF_CLUSTER -name "*.tfvars" -exec grep $CLUSTER {} \; | grep $CLUSTER || export exists=1
          if [[ "$exists" == "1" ]]; then
            echo "::error::Unable to find cluster defined in any terraform files, aborting!"
            exit 1
          fi
          
          case ${ENVIRONMENT} in
            "test")
              echo "No lower env exists"
              exit 0
              ;;
            "dev")
              echo "No lower env exists"
              exit 0
              ;;
            "stage")
              echo "Dev is the previous environment"
              export PREVIOUS_CLUSTER=$(echo $CLUSTER | awk -F- '{print $1 "-" $2 "-" $3 "-dev-" $5}')
              echo "PREVIOUS_CLUSTER=$PREVIOUS_CLUSTER" >> $GITHUB_ENV
              exit 0
              ;;
            "prod")
              echo "Stage is the previous environment"
              export PREVIOUS_CLUSTER=$(echo $CLUSTER | awk -F- '{print $1 "-" $2 "-" $3 "-stage-" $5}')
              echo "PREVIOUS_CLUSTER=$PREVIOUS_CLUSTER" >> $GITHUB_ENV
              exit 0
              ;;
            *)
              echo "::error::Unforseen error in validation, no previous environment found"
              exit 1
              ;;
          esac
      - name: Find previous deployment
        uses: peter-evans/find-comment@v1
        id: fc
        with:
          direction: last
          issue-number: ${{ github.event.client_payload.github.payload.issue.number }}
          body-includes: "${env.PREVIOUS_CLUSTER} successfully deployed"
          #body-includes: ${{ github.event.client_payload.github.payload.slash_command.args.all }}
      - name: verify order
        if: env.OVERRIDE != 'true'
        run: |
          if [[ "${ENVIRONMENT}" == "test" ]]; then
            echo "test environment, no need to check"
            exit 0
          fi
          if [[ "${ENVIRONMENT}" == "dev" ]]; then
            echo "Dev environment, no need to check"
            exit 0
          fi
          if [[ "${{steps.fc.outputs.comment-id}}" != "" ]]; then
            echo "Previous installation was ok! Proceeding"
          else
            echo "::error::Previous version not applied correctly, aborting."
            exit 1
          fi
      # Send update comment with +1 before starting to apply
      - name: Add reaction
        uses: peter-evans/create-or-update-comment@v1
        with:
          token: ${{ secrets.PAT }}
          repository: ${{ github.event.client_payload.github.payload.repository.full_name }}
          comment-id: ${{ github.event.client_payload.github.payload.comment.id }}
          reaction-type: "+1"

      # Run the apply step

      # Add successful comment if apply was successful
      - name: Create success comment
        if: success()
        uses: peter-evans/create-or-update-comment@v1
        with:
          issue-number: ${{ github.event.client_payload.pull_request.number }}
          body: |
            ${{ env.CLUSTER }} successfully deployed
          reactions: hooray
      # Add comment if it failed
      - name: Create failed comment
        if: failure()
        uses: peter-evans/create-or-update-comment@v1
        with:
          issue-number: ${{ github.event.client_payload.pull_request.number }}
          body: |
            ${{ env.CLUSTER }} apply failed
          reactions: confused