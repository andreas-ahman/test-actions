name: 'Terraform Plan Stage (PR)'
on:
  - pull_request
env:
  CONFIG_PROJECT: ${{ secrets.CONFIG_PROJECT }}
  TF_VERSION: 0.13.5
jobs:
  create-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      build_cluster: ${{ steps.set-matrix.outputs.build_cluster }}
    steps:
    - name: 'Checkout'
      uses: actions/checkout@v2
    - name: Set environments
      run: |
        if [[ "${{ github.base_ref }}" == "develop" ]]; then
          export CLUSTERS=$(jq -cr '[.[] | select(.env == "test")).cluster]' clusters.json)
          echo "CLUSTERS=${CLUSTERS}" >> $GITHUB_ENV
        elif [[ "${{ github.base_ref }}" == "production" ]]; then
          export CLUSTERS=$(jq -cr '[.[] | select(.env | inside("dev", "stage", "prod")).cluster]' clusters.json)
          echo "CLUSTERS=${CLUSTERS}" >> $GITHUB_ENV
        else
          echo "::error::Not allowed to run this pipeline against any other branches than develop and production"
          exit 1
        fi
          
    - id: set-matrix
      run: |
        if [ "$CLUSTERS" = null ]; then
          echo "::set-output name=matrix::{\"clusters\": [\"false\"]}"
          echo "::set-output name=build_cluster::\"false\""
        else
          echo "::set-output name=matrix::{\"clusters\": ${CLUSTERS}}"
          echo "::set-output name=build_cluster::\"true\""
        fi
  terraform:
    needs: create-matrix
    if: contains(needs.create-matrix.outputs.build_cluster, 'true')
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.create-matrix.outputs.matrix) }}
    steps:
      - name: 'Check cluster env  '
        run: |
          export env=$(jq -cr ".[] | select(.env == \"$CLUSTER\")" clusters.json)
          export terraform=$(jq -cr ".[] | select(.terraform == \"$CLUSTER\")" clusters.json)
          echo "CLUSTER=$CLUSTER" >> $GITHUB_ENV
          echo "ENVIRONMENT=$env" >> $GITHUB_ENV
          echo "TERRAFORM=$terraform" >> $GITHUB_ENV
        env:
          CLUSTER: ${{ matrix.clusters }}
      - name: 'Checkout'
        uses: actions/checkout@master
      - name: Setup GCloud
        uses: google-github-actions/setup-gcloud@master
        with:
          version: '347.0.0'
          service_account_key: ${{ secrets.SECRET_MANAGER_KEY }}
      - name: Prepare terraform backend config
        run: |
          echo bucket\ =\ \"${TERRAFORM}-${ENVIRONMENT}-tf\" > terraform/${TERRAFORM}/backend.tfvars
      - name: Get GKE service accounts
        run: |
          gcloud secrets versions access latest \
            --secret="tf-gke-config" \
            --project=${CONFIG_PROJECT} > sa-config.json
          gcloud secrets versions access latest \
            --secret="tf-gke-${ENVIRONMENT}" \
            --project=${CONFIG_PROJECT} | base64 --decode > sa.json
          echo "GOOGLE_APPLICATION_CREDENTIALS=${GITHUB_WORKSPACE}/sa.json" >> $GITHUB_ENV
      - name: Create bucket
        run: |
            gcloud auth activate-service-account --key-file=${GITHUB_WORKSPACE}/sa-config.json
            gcloud config set project $CONFIG_PROJECT
            gsutil ls gs://$TERRAFORM-$ENVIRONMENT-tf || gsutil mb gs://$TERRAFORM-$ENVIRONMENT-tf
            gsutil versioning set on gs://$TERRAFORM-$ENVIRONMENT-tf
      - name: 'Terraform Setup'
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ env.TF_VERSION }}
      - name: 'Terraform Format'
        id: tf_fmt
        run: terraform fmt
        working-directory: './terraform/${{env.TERRAFORM}}'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: 'Terraform Init'
        id: tf_init
        run: terraform init -backend-config=backend.tfvars
        working-directory: './terraform/${{env.TERRAFORM}}'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: 'Terraform Validate'
        id: tf_validate
        run: terraform validate -no-color
        working-directory: './terraform/${{env.TERRAFORM}}'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: 'Terraform Plan'
        id: tf_plan
        run: terraform plan -no-color -var-file=${{env.ENVIRONMENT}}.tfvars
        working-directory: './terraform/${{env.TERRAFORM}}'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: 'Terraform Issue Comment'
        uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.tf_plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.tf_fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.tf_init.outcome }}\`
            #### Terraform Validation ü§ñ${{ steps.tf_validate.outputs.stdout }}
            #### Terraform Plan üìñ\`${{ steps.tf_plan.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`${process.env.PLAN}\`\`\`
            </details>
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })